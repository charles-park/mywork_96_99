####################################################################################################
#                                                                                                  #
#     Micro Series 8051 C-Compiler V5.12K/DXT                              23/Jan/97  09:47:34     #
#     Front end V4.04                                                                              #
#     Global Optimizer V1.00E                                                                      #
#                                                                                                  #
#           Target option =  8051                                                                  #
#           Memory model  =  large                                                                 #
#           Source file   =  lcd.c                                                                 #
#           List file     =  lcd.lst                                                               #
#           Object file   =  lcd.r03                                                               #
#           Command line  =  LCD.C -ml -s -K -P -L -q -C                                           #
#                                                                                                  #
#                                                                   (c) Copyright IAR Systems 1994 #
####################################################################################################

   \   0000                    NAME    lcd(18)
   \   0000                    RSEG    CODE(0)
   \   0000                    RSEG    CSTR(0)
   \   0000                    PUBLIC  Display_OnOff
   \   0000                    $DEFFN  Display_OnOff(0,0,0,0,0,0,1,0),init_lcd
   \   0000                    PUBLIC  Entry_mode
   \   0000                    $DEFFN  Entry_mode(0,0,0,0,0,0,1,0),init_lcd
   \   0000                    PUBLIC  LEFT_clr
   \   0000                    $DEFFN  LEFT_clr(0,0,1,0,0,0,1,0)
   \   0000                    PUBLIC  L_clr
   \   0000                    $DEFFN  L_clr(0,0,0,0,0,0,0,0),init_lcd
   \   0000                    PUBLIC  L_clrLine
   \   0000                    $DEFFN  L_clrLine(0,0,1,0,0,0,1,0)
   \   0000                    PUBLIC  L_printf
   \   0000                    $DEFFN  L_printf(0,0,0,0,0,0,6,0),L_clrLine,RIGHT_clr,LEFT_clr
   \   0000                    PUBLIC  L_rethome
   \   0000                    $DEFFN  L_rethome(0,0,0,0,0,0,0,0),init_lcd
   \   0000                    PUBLIC  L_shift
   \   0000                    $DEFFN  L_shift(0,0,1,0,0,0,3,0)
   \   0000                    PUBLIC  RIGHT_clr
   \   0000                    $DEFFN  RIGHT_clr(0,0,1,0,0,0,1,0)
   \   0000                    PUBLIC  delay
   \   0000                    $DEFFN  delay(0,0,2,0,0,0,2,0),write_char,lcd_disp,L_clr,Entry_mode,L_rethome,
   \   0000                            Display_OnOff,func_set,init_lcd
   \   0000                    PUBLIC  func_set
   \   0000                    $DEFFN  func_set(0,0,0,0,0,0,0,0),init_lcd
   \   0000                    PUBLIC  init_lcd
   \   0000                    $DEFFN  init_lcd(0,0,0,0,0,0,0,0)
   \   0000                    PUBLIC  lcd_disp
   \   0000                    $DEFFN  lcd_disp(0,0,0,0,0,0,2,0),L_printf
   \   0000                    PUBLIC  long_delay
   \   0000                    $DEFFN  long_delay(0,0,3,0,0,0,1,0),RIGHT_clr,LEFT_clr,L_shift,L_printf
   \   0000                    PUBLIC  write_char
   \   0000                    $DEFFN  write_char(0,0,0,0,0,0,1,0),L_printf
   \   0000                    EXTERN  ?LD_A_R123_L17
   \   0000                    EXTERN  ?LD_A_R567_L17
   \   0000                    EXTERN  ?PINC1_R567_TO_R123_L20
   \   0000                    EXTERN  ?CL8051L_5_12_L17
   \   0000                    RSEG    CODE
      1          // LCD Library Program
      2          
      3          #include <io51.h>
      4          #include <lcd_def.h>
      5          
      6          void init_lcd(void)
      7          {
   \   0000            init_lcd:
      8              /* LCD Enable ---> 0 */
      9          
     10              delay(300);
   \   0000  7D01              MOV     R5,#1
   \   0002  7C2C              MOV     R4,#44
   \   0004  120000            LCALL   $REFFN delay
     11              func_set();      /* First Config DATA */
   \   0007  120000            LCALL   $REFFN func_set
     12          
     13              delay(200);
   \   000A  E4                CLR     A
   \   000B  FD                MOV     R5,A
   \   000C  7CC8              MOV     R4,#200
   \   000E  120000            LCALL   $REFFN delay
     14              func_set();
   \   0011  120000            LCALL   $REFFN func_set
     15          
     16              delay(100);
   \   0014  E4                CLR     A
   \   0015  FD                MOV     R5,A
   \   0016  7C64              MOV     R4,#100
   \   0018  120000            LCALL   $REFFN delay
     17              func_set();
   \   001B  120000            LCALL   $REFFN func_set
     18          
     19              Display_OnOff(Dis_On_Off);    /* Display On/Off Control */
   \   001E  7C0C              MOV     R4,#12
   \   0020  120000            LCALL   $REFFN Display_OnOff
     20          
     21              L_rethome();                  /* LCD Cursor Return Home */
   \   0023  120000            LCALL   $REFFN L_rethome
     22          
     23              Entry_mode(Ent_Mode);         /* Entry Mode Setup */
   \   0026  7C06              MOV     R4,#6
   \   0028  120000            LCALL   $REFFN Entry_mode
     24          
     25              L_clr();                      /* LCD CLEAR Function */
   \   002B  120000            LCALL   $REFFN L_clr
     26          }
   \   002E  22                RET
     27          
     28          void func_set(void)      /* First Config data write to LCD  */
     29          {
   \   002F            func_set:
     30              /* 8 Bit interface, 2 Line display, 5*7 font config */
     31              /* RS  R/W  D7  D6  D5  D4  D3  D2  D1  D0          */
     32              /* 0   0    0   0   1   DL  N   F   *   *           */
     33              /* DL = 8/4 bit, N = 2/1 Line, F = 5*10 / 5*7 dot   */
     34              
     35              output(LCD_CON,SETUP);
   \   002F  7438              MOV     A,#56
   \   0031  90C000            MOV     DPTR,#49152
   \   0034  F0                MOVX    @DPTR,A
     36              delay(100);
   \   0035  E4                CLR     A
   \   0036  FD                MOV     R5,A
   \   0037  7C64              MOV     R4,#100
   \   0039  120000            LCALL   $REFFN delay
     37          }
   \   003C  22                RET
     38          
     39          /* Display ON/OFF Control DATA Write to LCD         */
     40          /* RS  R/W  D7  D6  D5  D4  D3  D2  D1  D0          */
     41          /* 0   0    0   0   0   0   1   D   C   B           */
     42          /* D = All Display ON/OFF, C = Cursor ON/OFF, B = Cursor Position BLINK ON/OFF */
     43          
     44          void Display_OnOff(Byte DCB)
     45          {
   \   003D            Display_OnOff:
     46              delay(100);
   \   003D  EC                MOV     A,R4
   \   003E  900000            MOV     DPTR,#$LOCBX Display_OnOff
   \   0041  F0                MOVX    @DPTR,A
   \   0042  E4                CLR     A
   \   0043  FD                MOV     R5,A
   \   0044  7C64              MOV     R4,#100
   \   0046  120000            LCALL   $REFFN delay
     47              output(LCD_CON,DCB & 0xf);
   \   0049  900000            MOV     DPTR,#$LOCBX Display_OnOff
   \   004C  E0                MOVX    A,@DPTR
   \   004D  540F              ANL     A,#15
   \   004F  90C000            MOV     DPTR,#49152
   \   0052  F0                MOVX    @DPTR,A
     48          }
   \   0053  22                RET
     49          
     50          /* Cursor & DD RAM Address return HOME(Address 0,0) */
     51          /* RS  R/W  D7  D6  D5  D4  D3  D2  D1  D0          */
     52          /* 0   0    0   0   0   0   0   0   1   *           */
     53          
     54          void L_rethome(void)
     55          {
   \   0054            L_rethome:
     56              delay(100);
   \   0054  E4                CLR     A
   \   0055  FD                MOV     R5,A
   \   0056  7C64              MOV     R4,#100
   \   0058  120000            LCALL   $REFFN delay
     57              output(LCD_CON,0x02);
   \   005B  7402              MOV     A,#2
   \   005D  90C000            MOV     DPTR,#49152
   \   0060  F0                MOVX    @DPTR,A
     58          }
   \   0061  22                RET
     59          
     60          /* Cursor Entry MODE Write data to LCD              */
     61          /* RS  R/W  D7  D6  D5  D4  D3  D2  D1  D0          */
     62          /* 0   0    0   0   0   0   0   1   I/D S           */
     63          /* I/D = Increment/Decrement, S = Display Shift/Cursor Shift */
     64          
     65          void Entry_mode(Byte IDS)
     66          {
   \   0062            Entry_mode:
     67              delay(100);
   \   0062  EC                MOV     A,R4
   \   0063  900000            MOV     DPTR,#$LOCBX Entry_mode
   \   0066  F0                MOVX    @DPTR,A
   \   0067  E4                CLR     A
   \   0068  FD                MOV     R5,A
   \   0069  7C64              MOV     R4,#100
   \   006B  120000            LCALL   $REFFN delay
     68              output(LCD_CON,IDS & 0x7);
   \   006E  900000            MOV     DPTR,#$LOCBX Entry_mode
   \   0071  E0                MOVX    A,@DPTR
   \   0072  5407              ANL     A,#7
   \   0074  90C000            MOV     DPTR,#49152
   \   0077  F0                MOVX    @DPTR,A
     69          }
   \   0078  22                RET
     70          
     71          /* CLEAR Display data                               */
     72          /* RS  R/W  D7  D6  D5  D4  D3  D2  D1  D0          */
     73          /* 0   0    0   0   0   0   0   0   0   1           */
     74          
     75          void L_clr(void)      /* LCD Clear Function */
     76          {
   \   0079            L_clr:
     77              output(LCD_CON,0x1);
   \   0079  7401              MOV     A,#1
   \   007B  90C000            MOV     DPTR,#49152
   \   007E  F0                MOVX    @DPTR,A
     78              delay(100);
   \   007F  E4                CLR     A
   \   0080  FD                MOV     R5,A
   \   0081  7C64              MOV     R4,#100
   \   0083  120000            LCALL   $REFFN delay
     79          }
   \   0086  22                RET
     80          
     81          /* Charicter String Processing Roution & Delay */
     82          /* Error Point : 0x00 ==> LCD Write End */
     83          
     84          void L_printf(Byte x, Byte y, Byte *str, Byte Dly)
     85          {
   \   0087            L_printf:
     86              lcd_disp(x,y);
   \   0087  ED                MOV     A,R5
   \   0088  900000            MOV     DPTR,#$LOCBX L_printf+1
   \   008B  F0                MOVX    @DPTR,A
   \   008C  EC                MOV     A,R4
   \   008D  900000            MOV     DPTR,#$LOCBX L_printf
   \   0090  F0                MOVX    @DPTR,A
   \   0091  120000            LCALL   $REFFN lcd_disp
   \   0094            ?0001:
     87              
     88              while(*str != 0x00)
   \   0094  900000            MOV     DPTR,#$LOCBX L_printf+2
   \   0097  E0                MOVX    A,@DPTR
   \   0098  FF                MOV     R7,A
   \   0099  A3                INC     DPTR
   \   009A  E0                MOVX    A,@DPTR
   \   009B  FE                MOV     R6,A
   \   009C  A3                INC     DPTR
   \   009D  E0                MOVX    A,@DPTR
   \   009E  FD                MOV     R5,A
   \   009F  120000            LCALL   ?LD_A_R567_L17
   \   00A2  6021              JZ      ?0000
   \   00A4            ?0002:
     89              {
     90                  write_char(*str++);
   \   00A4  120000            LCALL   ?PINC1_R567_TO_R123_L20
   \   00A7  900000            MOV     DPTR,#$LOCBX L_printf+2
   \   00AA  EF                MOV     A,R7
   \   00AB  F0                MOVX    @DPTR,A
   \   00AC  A3                INC     DPTR
   \   00AD  EE                MOV     A,R6
   \   00AE  F0                MOVX    @DPTR,A
   \   00AF  A3                INC     DPTR
   \   00B0  ED                MOV     A,R5
   \   00B1  F0                MOVX    @DPTR,A
   \   00B2  120000            LCALL   ?LD_A_R123_L17
   \   00B5  FC                MOV     R4,A
   \   00B6  120000            LCALL   $REFFN write_char
     91                  if(Dly != 0)    long_delay(Dly);
   \   00B9  900000            MOV     DPTR,#$LOCBX L_printf+5
   \   00BC  E0                MOVX    A,@DPTR
   \   00BD  6004              JZ      ?0004
   \   00BF            ?0003:
   \   00BF  FC                MOV     R4,A
   \   00C0  120000            LCALL   $REFFN long_delay
   \   00C3            ?0004:
     92              }
     93          }
   \   00C3  80CF              SJMP    ?0001
   \   00C5            ?0000:
   \   00C5  22                RET
     94          
     95          /* LCD Charicter Write Position Config */
     96          void lcd_disp(Byte x, Byte y)
     97          {
   \   00C6            lcd_disp:
     98              /* LCD display NUMBER discription (DDRAM)  2 Line LCD
     99              | 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f .....|
    100              | 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f .....|
    101              */ 
    102              /* 4 Line LCD (if 20 Chars * 4 Line)
    103              | 00 01 02 ...
    104              | 40 41 42 ...
    105              | 20 21 22 ...
    106              | 60 61 62 ...
    107              */
    108              
    109              /* SET LCD Display data RAM address                 */
    110              /* RS  R/W  D7  D6  D5  D4  D3  D2  D1  D0          */
    111              /* 0   0    1   DDRAM Address data(0 - 7f)          */
    112          
    113              if(y == 1)  output(LCD_CON,0xC0+x);   /* 0x80 | 0x40 => Second Line Position */
   \   00C6  ED                MOV     A,R5
   \   00C7  900000            MOV     DPTR,#$LOCBX lcd_disp+1
   \   00CA  F0                MOVX    @DPTR,A
   \   00CB  EC                MOV     A,R4
   \   00CC  900000            MOV     DPTR,#$LOCBX lcd_disp
   \   00CF  F0                MOVX    @DPTR,A
   \   00D0  ED                MOV     A,R5
   \   00D1  14                DEC     A
   \   00D2  7009              JNZ     ?0006
   \   00D4            ?0005:
   \   00D4  EC                MOV     A,R4
   \   00D5  24C0              ADD     A,#192
   \   00D7  90C000            MOV     DPTR,#49152
   \   00DA  F0                MOVX    @DPTR,A
   \   00DB  8020              SJMP    ?0007
   \   00DD            ?0006:
    114              else if(y == 2) output(LCD_CON,0x80+x+COLUM); // First Line - 1
   \   00DD  ED                MOV     A,R5
   \   00DE  B40209            CJNE    A,#2,?0009
   \   00E1            ?0008:
   \   00E1  EC                MOV     A,R4
   \   00E2  2494              ADD     A,#148
   \   00E4  90C000            MOV     DPTR,#49152
   \   00E7  F0                MOVX    @DPTR,A
   \   00E8  8013              SJMP    ?0010
   \   00EA            ?0009:
    115              else if(y ==3) output(LCD_CON,0xC0+x+COLUM);  // Second Line -1
   \   00EA  B40309            CJNE    A,#3,?0012
   \   00ED            ?0011:
   \   00ED  EC                MOV     A,R4
   \   00EE  24D4              ADD     A,#212
   \   00F0  90C000            MOV     DPTR,#49152
   \   00F3  F0                MOVX    @DPTR,A
   \   00F4  8007              SJMP    ?0013
   \   00F6            ?0012:
    116              else output(LCD_CON,0x80+x);          /* 0x80 | 0x00 => First Line Position  */
   \   00F6  EC                MOV     A,R4
   \   00F7  2480              ADD     A,#128
   \   00F9  90C000            MOV     DPTR,#49152
   \   00FC  F0                MOVX    @DPTR,A
   \   00FD            ?0013:
   \   00FD            ?0010:
   \   00FD            ?0007:
    117          
    118              delay(100);
   \   00FD  E4                CLR     A
   \   00FE  FD                MOV     R5,A
   \   00FF  7C64              MOV     R4,#100
   \   0101  120000            LCALL   $REFFN delay
    119          }
   \   0104  22                RET
    120          
    121          void write_char(Byte s)   /* One charicter write to LCD */
    122          {
   \   0105            write_char:
    123              output(LCD_DATA,s);
   \   0105  EC                MOV     A,R4
   \   0106  90C001            MOV     DPTR,#49153
   \   0109  F0                MOVX    @DPTR,A
   \   010A  900000            MOV     DPTR,#$LOCBX write_char
   \   010D  F0                MOVX    @DPTR,A
    124              delay(100);
   \   010E  E4                CLR     A
   \   010F  FD                MOV     R5,A
   \   0110  7C64              MOV     R4,#100
   \   0112  120000            LCALL   $REFFN delay
    125          }
   \   0115  22                RET
    126          
    127          void L_shift(Byte move,Byte rot,Byte dly)
    128          {
   \   0116            L_shift:
    129              Byte count;
    130          
    131              for(count=0;count<rot;count++)
   \   0116  E4                CLR     A
   \   0117  900000            MOV     DPTR,#$LOCBX L_shift
   \   011A  F0                MOVX    @DPTR,A
   \   011B  EE                MOV     A,R6
   \   011C  900000            MOV     DPTR,#$LOCBX L_shift+3
   \   011F  F0                MOVX    @DPTR,A
   \   0120  ED                MOV     A,R5
   \   0121  900000            MOV     DPTR,#$LOCBX L_shift+2
   \   0124  F0                MOVX    @DPTR,A
   \   0125  EC                MOV     A,R4
   \   0126  900000            MOV     DPTR,#$LOCBX L_shift+1
   \   0129  F0                MOVX    @DPTR,A
   \   012A            ?0015:
   \   012A  900000            MOV     DPTR,#$LOCBX L_shift
   \   012D  E0                MOVX    A,@DPTR
   \   012E  FC                MOV     R4,A
   \   012F  A3                INC     DPTR
   \   0130  A3                INC     DPTR
   \   0131  E0                MOVX    A,@DPTR
   \   0132  D3                SETB    C
   \   0133  9C                SUBB    A,R4
   \   0134  4018              JC      ?0014
   \   0136            ?0016:
    132              {
    133                  output(LCD_CON,move);
   \   0136  900000            MOV     DPTR,#$LOCBX L_shift+1
   \   0139  E0                MOVX    A,@DPTR
   \   013A  90C000            MOV     DPTR,#49152
   \   013D  F0                MOVX    @DPTR,A
    134                  long_delay(dly);
   \   013E  900000            MOV     DPTR,#$LOCBX L_shift+3
   \   0141  E0                MOVX    A,@DPTR
   \   0142  FC                MOV     R4,A
   \   0143  120000            LCALL   $REFFN long_delay
   \   0146  900000            MOV     DPTR,#$LOCBX L_shift
   \   0149  E0                MOVX    A,@DPTR
   \   014A  04                INC     A
   \   014B  F0                MOVX    @DPTR,A
    135              }
    136          }
   \   014C  80DC              SJMP    ?0015
   \   014E            ?0014:
   \   014E  22                RET
    137                     
    138          void LEFT_clr(Byte line)
    139          {
   \   014F            LEFT_clr:
    140              Byte i;
    141              for(i=COLUM;i>0;--i)
   \   014F  7414              MOV     A,#20
   \   0151  900000            MOV     DPTR,#$LOCBX LEFT_clr
   \   0154  F0                MOVX    @DPTR,A
   \   0155  EC                MOV     A,R4
   \   0156  A3                INC     DPTR
   \   0157  F0                MOVX    @DPTR,A
   \   0158            ?0019:
   \   0158  900000            MOV     DPTR,#$LOCBX LEFT_clr
   \   015B  E0                MOVX    A,@DPTR
   \   015C  6030              JZ      ?0018
   \   015E            ?0020:
    142              {
    143                  L_printf(i,line," ",0);
   \   015E  E4                CLR     A
   \   015F  900000            MOV     DPTR,#$PRMBX L_printf+5
   \   0162  F0                MOVX    @DPTR,A
   \   0163  7D00              MOV     R5,#LOW(?0022)
   \   0165  7E00              MOV     R6,#HIGH(?0022)
   \   0167  7F02              MOV     R7,#2
   \   0169  900000            MOV     DPTR,#$PRMBX L_printf+2
   \   016C  EF                MOV     A,R7
   \   016D  F0                MOVX    @DPTR,A
   \   016E  A3                INC     DPTR
   \   016F  EE                MOV     A,R6
   \   0170  F0                MOVX    @DPTR,A
   \   0171  A3                INC     DPTR
   \   0172  ED                MOV     A,R5
   \   0173  F0                MOVX    @DPTR,A
   \   0174  900000            MOV     DPTR,#$LOCBX LEFT_clr+1
   \   0177  E0                MOVX    A,@DPTR
   \   0178  FD                MOV     R5,A
   \   0179  900000            MOV     DPTR,#$LOCBX LEFT_clr
   \   017C  E0                MOVX    A,@DPTR
   \   017D  FC                MOV     R4,A
   \   017E  120000            LCALL   $REFFN L_printf
    144                  long_delay(1);
   \   0181  7C01              MOV     R4,#1
   \   0183  120000            LCALL   $REFFN long_delay
   \   0186  900000            MOV     DPTR,#$LOCBX LEFT_clr
   \   0189  E0                MOVX    A,@DPTR
   \   018A  14                DEC     A
   \   018B  F0                MOVX    @DPTR,A
   \   018C  80CA              SJMP    ?0019
   \   018E            ?0018:
    145              }
    146              L_printf(0,line," ",0);
   \   018E  E4                CLR     A
   \   018F  900000            MOV     DPTR,#$PRMBX L_printf+5
   \   0192  F0                MOVX    @DPTR,A
   \   0193  7D00              MOV     R5,#LOW(?0022)
   \   0195  7E00              MOV     R6,#HIGH(?0022)
   \   0197  7F02              MOV     R7,#2
   \   0199  900000            MOV     DPTR,#$PRMBX L_printf+2
   \   019C  EF                MOV     A,R7
   \   019D  F0                MOVX    @DPTR,A
   \   019E  A3                INC     DPTR
   \   019F  EE                MOV     A,R6
   \   01A0  F0                MOVX    @DPTR,A
   \   01A1  A3                INC     DPTR
   \   01A2  ED                MOV     A,R5
   \   01A3  F0                MOVX    @DPTR,A
   \   01A4  900000            MOV     DPTR,#$LOCBX LEFT_clr+1
   \   01A7  E0                MOVX    A,@DPTR
   \   01A8  FD                MOV     R5,A
   \   01A9  7C00              MOV     R4,#0
   \   01AB  120000            LCALL   $REFFN L_printf
    147          }
   \   01AE  22                RET
    148          
    149          void RIGHT_clr(Byte line1)
    150          {
   \   01AF            RIGHT_clr:
    151              Byte ii;
    152              for(ii=0;ii<=COLUM;ii++)
   \   01AF  E4                CLR     A
   \   01B0  900000            MOV     DPTR,#$LOCBX RIGHT_clr
   \   01B3  F0                MOVX    @DPTR,A
   \   01B4  EC                MOV     A,R4
   \   01B5  A3                INC     DPTR
   \   01B6  F0                MOVX    @DPTR,A
   \   01B7            ?0024:
   \   01B7  900000            MOV     DPTR,#$LOCBX RIGHT_clr
   \   01BA  E0                MOVX    A,@DPTR
   \   01BB  C3                CLR     C
   \   01BC  9415              SUBB    A,#21
   \   01BE  5030              JNC     ?0023
   \   01C0            ?0025:
    153              {
    154                  L_printf(ii,line1," ",0);
   \   01C0  E4                CLR     A
   \   01C1  900000            MOV     DPTR,#$PRMBX L_printf+5
   \   01C4  F0                MOVX    @DPTR,A
   \   01C5  7D00              MOV     R5,#LOW(?0022)
   \   01C7  7E00              MOV     R6,#HIGH(?0022)
   \   01C9  7F02              MOV     R7,#2
   \   01CB  900000            MOV     DPTR,#$PRMBX L_printf+2
   \   01CE  EF                MOV     A,R7
   \   01CF  F0                MOVX    @DPTR,A
   \   01D0  A3                INC     DPTR
   \   01D1  EE                MOV     A,R6
   \   01D2  F0                MOVX    @DPTR,A
   \   01D3  A3                INC     DPTR
   \   01D4  ED                MOV     A,R5
   \   01D5  F0                MOVX    @DPTR,A
   \   01D6  900000            MOV     DPTR,#$LOCBX RIGHT_clr+1
   \   01D9  E0                MOVX    A,@DPTR
   \   01DA  FD                MOV     R5,A
   \   01DB  900000            MOV     DPTR,#$LOCBX RIGHT_clr
   \   01DE  E0                MOVX    A,@DPTR
   \   01DF  FC                MOV     R4,A
   \   01E0  120000            LCALL   $REFFN L_printf
    155                  long_delay(1);
   \   01E3  7C01              MOV     R4,#1
   \   01E5  120000            LCALL   $REFFN long_delay
   \   01E8  900000            MOV     DPTR,#$LOCBX RIGHT_clr
   \   01EB  E0                MOVX    A,@DPTR
   \   01EC  04                INC     A
   \   01ED  F0                MOVX    @DPTR,A
    156              }
    157          }
   \   01EE  80C7              SJMP    ?0024
   \   01F0            ?0023:
   \   01F0  22                RET
    158          
    159          void L_clrLine(Byte Line)
    160          {
   \   01F1            L_clrLine:
    161              Byte ii;
    162              
    163              for(ii=Line;ii<=COLUM;ii++)     L_printf(ii,Line," ",0);
   \   01F1  EC                MOV     A,R4
   \   01F2  900000            MOV     DPTR,#$LOCBX L_clrLine
   \   01F5  F0                MOVX    @DPTR,A
   \   01F6  A3                INC     DPTR
   \   01F7  F0                MOVX    @DPTR,A
   \   01F8            ?0028:
   \   01F8  900000            MOV     DPTR,#$LOCBX L_clrLine
   \   01FB  E0                MOVX    A,@DPTR
   \   01FC  C3                CLR     C
   \   01FD  9415              SUBB    A,#21
   \   01FF  502B              JNC     ?0027
   \   0201            ?0029:
   \   0201  E4                CLR     A
   \   0202  900000            MOV     DPTR,#$PRMBX L_printf+5
   \   0205  F0                MOVX    @DPTR,A
   \   0206  7D00              MOV     R5,#LOW(?0022)
   \   0208  7E00              MOV     R6,#HIGH(?0022)
   \   020A  7F02              MOV     R7,#2
   \   020C  900000            MOV     DPTR,#$PRMBX L_printf+2
   \   020F  EF                MOV     A,R7
   \   0210  F0                MOVX    @DPTR,A
   \   0211  A3                INC     DPTR
   \   0212  EE                MOV     A,R6
   \   0213  F0                MOVX    @DPTR,A
   \   0214  A3                INC     DPTR
   \   0215  ED                MOV     A,R5
   \   0216  F0                MOVX    @DPTR,A
   \   0217  900000            MOV     DPTR,#$LOCBX L_clrLine+1
   \   021A  E0                MOVX    A,@DPTR
   \   021B  FD                MOV     R5,A
   \   021C  900000            MOV     DPTR,#$LOCBX L_clrLine
   \   021F  E0                MOVX    A,@DPTR
   \   0220  FC                MOV     R4,A
   \   0221  120000            LCALL   $REFFN L_printf
   \   0224  900000            MOV     DPTR,#$LOCBX L_clrLine
   \   0227  E0                MOVX    A,@DPTR
   \   0228  04                INC     A
   \   0229  F0                MOVX    @DPTR,A
    164          }
   \   022A  80CC              SJMP    ?0028
   \   022C            ?0027:
   \   022C  22                RET
    165          
    166          void delay(Word count)
    167          {
   \   022D            delay:
    168              /* delay control */
    169              
    170              Word comp;
    171              for(comp=0;comp<count;comp++)   ;
   \   022D  900000            MOV     DPTR,#$LOCBX delay
   \   0230  E4                CLR     A
   \   0231  F0                MOVX    @DPTR,A
   \   0232  A3                INC     DPTR
   \   0233  F0                MOVX    @DPTR,A
   \   0234  A3                INC     DPTR
   \   0235  ED                MOV     A,R5
   \   0236  F0                MOVX    @DPTR,A
   \   0237  A3                INC     DPTR
   \   0238  EC                MOV     A,R4
   \   0239  F0                MOVX    @DPTR,A
   \   023A            ?0032:
   \   023A  900000            MOV     DPTR,#$LOCBX delay
   \   023D  E0                MOVX    A,@DPTR
   \   023E  FD                MOV     R5,A
   \   023F  A3                INC     DPTR
   \   0240  E0                MOVX    A,@DPTR
   \   0241  FC                MOV     R4,A
   \   0242  A3                INC     DPTR
   \   0243  A3                INC     DPTR
   \   0244  E0                MOVX    A,@DPTR
   \   0245  D3                SETB    C
   \   0246  9C                SUBB    A,R4
   \   0247  900000            MOV     DPTR,#$LOCBX delay+2
   \   024A  E0                MOVX    A,@DPTR
   \   024B  9D                SUBB    A,R5
   \   024C  400F              JC      ?0031
   \   024E            ?0033:
   \   024E  0C                INC     R4
   \   024F  EC                MOV     A,R4
   \   0250  7001              JNZ     ?0043
   \   0252  0D                INC     R5
   \   0253            ?0043:
   \   0253  900000            MOV     DPTR,#$LOCBX delay
   \   0256  ED                MOV     A,R5
   \   0257  F0                MOVX    @DPTR,A
   \   0258  A3                INC     DPTR
   \   0259  EC                MOV     A,R4
   \   025A  F0                MOVX    @DPTR,A
    172          }
   \   025B  80DD              SJMP    ?0032
   \   025D            ?0031:
   \   025D  22                RET
    173          
    174          /* Long Time Delay */
    175          void long_delay(Byte i)
    176          {
   \   025E            long_delay:
    177              Byte j;
    178              Word comp;
    179          
    180              for(j=0;j<i;j++)
   \   025E  E4                CLR     A
   \   025F  900000            MOV     DPTR,#$LOCBX long_delay
   \   0262  F0                MOVX    @DPTR,A
   \   0263  EC                MOV     A,R4
   \   0264  900000            MOV     DPTR,#$LOCBX long_delay+3
   \   0267  F0                MOVX    @DPTR,A
   \   0268            ?0036:
   \   0268  900000            MOV     DPTR,#$LOCBX long_delay
   \   026B  E0                MOVX    A,@DPTR
   \   026C  FC                MOV     R4,A
   \   026D  900000            MOV     DPTR,#$LOCBX long_delay+3
   \   0270  E0                MOVX    A,@DPTR
   \   0271  D3                SETB    C
   \   0272  9C                SUBB    A,R4
   \   0273  402C              JC      ?0035
   \   0275            ?0037:
    181              {
    182                  for(comp=0;comp<L_DLYTIME;comp++)    ;
   \   0275  900000            MOV     DPTR,#$LOCBX long_delay+1
   \   0278  E4                CLR     A
   \   0279  F0                MOVX    @DPTR,A
   \   027A  A3                INC     DPTR
   \   027B  F0                MOVX    @DPTR,A
   \   027C            ?0040:
   \   027C  C3                CLR     C
   \   027D  900000            MOV     DPTR,#$LOCBX long_delay+2
   \   0280  E0                MOVX    A,@DPTR
   \   0281  9488              SUBB    A,#136
   \   0283  900000            MOV     DPTR,#$LOCBX long_delay+1
   \   0286  E0                MOVX    A,@DPTR
   \   0287  9413              SUBB    A,#19
   \   0289  500E              JNC     ?0039
   \   028B            ?0041:
   \   028B  A3                INC     DPTR
   \   028C  E0                MOVX    A,@DPTR
   \   028D  04                INC     A
   \   028E  F0                MOVX    @DPTR,A
   \   028F  900000            MOV     DPTR,#$LOCBX long_delay+1
   \   0292  7003              JNZ     ?0044
   \   0294  E0                MOVX    A,@DPTR
   \   0295  04                INC     A
   \   0296  F0                MOVX    @DPTR,A
   \   0297            ?0044:
    183              }
   \   0297  80E3              SJMP    ?0040
   \   0299            ?0039:
   \   0299  900000            MOV     DPTR,#$LOCBX long_delay
   \   029C  E0                MOVX    A,@DPTR
   \   029D  04                INC     A
   \   029E  F0                MOVX    @DPTR,A
    184          } 
   \   029F  80C7              SJMP    ?0036
   \   02A1            ?0035:
   \   02A1  22                RET
   \   0000                    RSEG    CSTR
   \   0000            ?0022:
   \   0000  2000              DB      ' ',0
   \   0002                    END

Errors: none
Warnings: none
Code size: 674
Constant size: 2
Static variable size: Data(0) Idata(0) Bit(0) Xdata(0)

