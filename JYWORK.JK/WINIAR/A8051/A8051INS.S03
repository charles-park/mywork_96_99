        aseg
        org     0

        nop
        ajmp    padr
        ljmp    ladr
        rr      a
        inc     a
        inc     dadr
        inc     @r0
        inc     @r1
        inc     r0
        inc     r1
        inc     r2
        inc     r3
        inc     r4
        inc     r5
        inc     r6
        inc     r7
        jbc     badr,$-10
        acall   padr
        lcall   ladr
        rrc     a
        dec     a
        dec     dadr
        dec     @r0
        dec     @r1
        dec     r0
        dec     r1
        dec     r2
        dec     r3
        dec     r4
        dec     r5
        dec     r6
        dec     r7
        jb      badr,$-10
        db      21h             ;ajmp
        ret
        rl      a
        add     a,#imm8
        add     a,dadr
        add     a,@r0
        add     a,@r1
        add     a,r0
        add     a,r1
        add     a,r2
        add     a,r3
        add     a,r4
        add     a,r5
        add     a,r6
        add     a,r7
        jnb     badr,$-10
        db      31h             ;acall
        reti
        rlc     a
        addc    a,#imm8
        addc    a,dadr
        addc    a,@r0
        addc    a,@r1
        addc    a,r0
        addc    a,r1
        addc    a,r2
        addc    a,r3
        addc    a,r4
        addc    a,r5
        addc    a,r6
        addc    a,r7
        jc      $-10
        db      41h             ;ajmp
        orl     dadr,a
        orl     dadr,#imm8
        orl     a,#imm8
        orl     a,dadr
        orl     a,@r0
        orl     a,@r1
        orl     a,r0
        orl     a,r1
        orl     a,r2
        orl     a,r3
        orl     a,r4
        orl     a,r5
        orl     a,r6
        orl     a,r7
        jnc     $-10
        db      51h             ;acall
        anl     dadr,a
        anl     dadr,#imm8
        anl     a,#imm8
        anl     a,dadr
        anl     a,@r0
        anl     a,@r1
        anl     a,r0
        anl     a,r1
        anl     a,r2
        anl     a,r3
        anl     a,r4
        anl     a,r5
        anl     a,r6
        anl     a,r7
        jz      $-10
        db      61h             ;ajmp
        xrl     dadr,a
        xrl     dadr,#imm8
        xrl     a,#imm8
        xrl     a,dadr
        xrl     a,@r0
        xrl     a,@r1
        xrl     a,r0
        xrl     a,r1
        xrl     a,r2
        xrl     a,r3
        xrl     a,r4
        xrl     a,r5
        xrl     a,r6
        xrl     a,r7
        jnz     $-10
        db      71h             ;acall
        orl     c,badr
        jmp     @a+dptr
        mov     a,#imm8
        mov     dadr,#imm8
        mov     @r0,#imm8
        mov     @r1,#imm8
        mov     r0,#imm8
        mov     r1,#imm8
        mov     r2,#imm8
        mov     r3,#imm8
        mov     r4,#imm8
        mov     r5,#imm8
        mov     r6,#imm8
        mov     r7,#imm8
        sjmp    $-10
        db      81h             ;ajmp
        anl     c,badr
        movc    a,@a+pc
        div     ab
        mov     dadr,dadr+5
        mov     dadr,@r0
        mov     dadr,@r1
        mov     dadr,r0
        mov     dadr,r1
        mov     dadr,r2
        mov     dadr,r3
        mov     dadr,r4
        mov     dadr,r5
        mov     dadr,r6
        mov     dadr,r7
        mov     dptr,#imm16
        db      91h             ;acall
        mov     badr,c
        movc    a,@a+dptr
        subb    a,#imm8
        subb    a,dadr
        subb    a,@r0
        subb    a,@r1
        subb    a,r0
        subb    a,r1
        subb    a,r2
        subb    a,r3
        subb    a,r4
        subb    a,r5
        subb    a,r6
        subb    a,r7
        orl     c,/badr
        db      0a1h            ;ajmp
        mov     c,badr
        inc     dptr
        mul     ab
        db      0a5h            ;reserved
        mov     @r0,dadr
        mov     @r1,dadr
        mov     r0,dadr
        mov     r1,dadr
        mov     r2,dadr
        mov     r3,dadr
        mov     r4,dadr
        mov     r5,dadr
        mov     r6,dadr
        mov     r7,dadr
        anl     c,/badr
        db      0b1h            ;acall
        cpl     badr
        cpl     c
        cjne    a,#imm8,$-10
        cjne    a,dadr,$-10
        cjne    @r0,#imm8,$-10
        cjne    @r1,#imm8,$-10
        cjne    r0,#imm8,$-10
        cjne    r1,#imm8,$-10
        cjne    r2,#imm8,$-10
        cjne    r3,#imm8,$-10
        cjne    r4,#imm8,$-10
        cjne    r5,#imm8,$-10
        cjne    r6,#imm8,$-10
        cjne    r7,#imm8,$-10
        push    dadr
        db      0c1h            ;ajmp
        clr     badr
        clr     c
        swap    a
        xch     a,dadr
        xch     a,@r0
        xch     a,@r1
        xch     a,r0
        xch     a,r1
        xch     a,r2
        xch     a,r3
        xch     a,r4
        xch     a,r5
        xch     a,r6
        xch     a,r7
        pop     dadr
        db      0d1h            ;acall
        setb    badr
        setb    c
        da      a
        djnz    dadr,$-10
        xchd    a,@r0
        xchd    a,@r1
        djnz    r0,$-10
        djnz    r1,$-10
        djnz    r2,$-10
        djnz    r3,$-10
        djnz    r4,$-10
        djnz    r5,$-10
        djnz    r6,$-10
        djnz    r7,$-10
        movx    a,@dptr
        db      0e1h            ;ajmp
        movx    a,@r0
        movx    a,@r1
        clr     a
        mov     a,dadr
        mov     a,@r0
        mov     a,@r1
        mov     a,r0
        mov     a,r1
        mov     a,r2
        mov     a,r3
        mov     a,r4
        mov     a,r5
        mov     a,r6
        mov     a,r7
        movx    @dptr,a
        db      0f1h            ;acall
        movx    @r0,a
        movx    @r1,a
        cpl     a
        mov     dadr,a
        mov     @r0,a
        mov     @r1,a
        mov     r0,a
        mov     r1,a
        mov     r2,a
        mov     r3,a
        mov     r4,a
        mov     r5,a
        mov     r6,a
        mov     r7,a
        
padr    =       23h
badr    =       27h
dadr    =       35h
ladr    =       8765h
imm16   =       'ab'
imm8    =       9

;           This part shows how the CALL and JMP instructions
;           are converted into ACALL, LCALL, SJMP, AJMP and LJMP.
        extern  somewhere

        call    0
; ACALL because:
;   1.  In ASEG
;   2.  Operand contains no forward references
;   3.  Operand is absolute
;   4.  Operand is within the current 2k page

        call    3000
; LCALL because:
;   1.  Operand is not within the current 2k page

        call    somewhere
; LCALL because:
;   1.  Operand is external

        call    forward
forward:
; LCALL because:
;   1.  Operand contains a forward reference

        jmp     0
; AJMP because:
;   1.  In ASEG
;   2.  Operand contains no forward references
;   3.  Operand is absolute
;   4.  Operand is within the current 2k page
;   5.  Operand is more than -126 to +129 bytes from $

        jmp     $+10
; SJMP because:
;   2.  Operand contains no forward references
;   3.  Operand has the type of the current segment
;   3.  Operand is within -126 to +129 bytes from $
        rseg    anywhere

        call    $+10
; LCALL because:
;   1.  In a relocatable section

; ICC8051 4.00 operators
;
	extern c_func1	
	$deffn c_func1(0,5,0,0),f,
g
	$deffn g(1,1,3,4,5,6,7,8)
	$deffn f(8,4,0,0,0,0,0,6),g
	rseg	code
f:
	mov	a,$locbd f
	mov	a,$locbi f + 4
	mov	a,$locbb f - 1
	mov	a,#$byte3 f
	mov	a,#$byte3 c_func1
	mov	a,#$byte3 123456H
	mov	dptr,#$locbx f + 3
	mov	a,$prmbd f
	mov	a,$prmbi f + 4
	mov	a,$prmbb f - 1
	mov	dptr,#$prmbx f + 3
	mov	a,$locbd f
	mov	a,$locbi c_func1 + 4
	mov	a,$locbb c_func1 - 1
	mov	dptr,#$locbx c_func1 + 3
	mov	a,$prmbd f
	mov	a,$prmbi c_func1 + 4
	mov	a,$prmbb c_func1 - 1
	mov	dptr,#$prmbx c_func1 + 3
	mov	$prmbd c_func1 - 3,$prmbd g + 3
	mov	$prmbd c_func1 - 3,#$prmbd f + 3
	mov	a,high ($locbx g + 5)
	mov	a,low ($locbx g + 5)
	mov	a,high ($prmbx g + 5)
	mov	a,low ($prmbx g + 5)
	mov	a,#low $ifref c_func1
	mov	a,#high $ifref g
	dw	($locbx f + 5)
	db	low(f + 5)
	lcall	$reffn f
g:
	dw	$ifref f + 6
	dw	$ifref c_func1
