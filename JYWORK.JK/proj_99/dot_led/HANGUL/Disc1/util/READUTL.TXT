      한글 라이브러리 2.0 은 매우 다양한 분야를 포함하고 있으므로 그에 
따른 편리한 사용을 위해서 다수의 유틸리티들을 포함하고 있다. 이 유틸리
티들은 한글 라이브러리 2.0 으로 만들어 진것이 대부분이며  hlv20utl.exe
속에 실행화일과 설명화일,그리고 소스가 들어 있으므로 훌륭한 예제의  역
할도 겸할 것이다.

<MKFONT.exe>

      한글 라이브러리 2.0 은 한글 8x4x4,10x4x4,6x2x1,2x1x2 등을 사용할 
수 있으며 영문은 현재 256 character 만을 사용할 수 있다. 폰트들은 화일
에서 읽어올 수도 있고 라이브러리의 내장 폰트를 사용할수도,또는  병행할 
수도 있다. 이때 등록되는 폰트의 형식은 .hft 라는 특별한 형식인데  이는 
라이브러리와 함께  있는  mkfont.exe  라는  실행화일에서  만들어지는  C 
format 이다. 즉 mkfont 를 실행시키면 화면에는 .fnt 와 .kor,.eng 가  나
타난다. ( 한화면에 표시가능한 분량 (약 40~50 개) 이상은 한번에  처리가 
안되므로 한화면 내로 폰트수를 맞출것 ) 바아를 움직여서 리턴을 치면  한
글 라이브러리에서 처리가 가능한 형식이면 형식을 자동 판단하여 (영문,한
글도 판단.한글의 형식도 판단) 화면에 간단한 문장으로 폰트의 모양을  보
여준다.

        또한 폰트화일의 형식도 보여주게 된다. 이 형식은 나중에  폰트를 
헤더화일에 업데이트할때 또 쓰이므로 잘 보아둔다. 마음에 드는 폰트가 있
으면 그 폰트위에 바아를 갖다놓고 F1 키이를 누르면 그  디렉토리에  .hft 
와 .asm 이 생기게 된다. 이 .hft 를 Large 모델로 bcc 를  이용해  컴파일 
하고 .asm 을 tasm (Turbo Assembler) 을 이용해서 컴파일 하면 .obj  화일
들을 얻는다. ( .hft 와 .asm 의 화일 이름은 조금 다름. .hft 화일의 이름 
끝에는 자동으로 I 가 붙는다. - 화일 이름이 a.fnt 였을 경우  ai.hft  와 
a.asm 이 생성됨 )

           +- 폰트 화일을 컴파일 하는 예 ----------+
           |                                       |
           |  ; 화일 이름이 test.fnt 라고 가정하면 |
           |    mkfont 는 testi.hft 와 test.asm 을 |
           |    만들어 준다.                       |
           |                                       |
           |  bcc -c -ml testi.hft <enter>         |
           |  tasm test.asm <enter>                |
           +---------------------------------------+

이것이 영문 폰트이면 hgfontel.lib 에 합치고,한글 폰트이면 hgfonthl.lib 
에 합친다.

           +- 라이브러리에 합치는 예 ----------------+
           |                                         |
           |  tlib hgfontel.lib+testi.obj (영문일때) |
           |  tlib hgfontel.lib+test.obj             |
           |                                         |
           |  tlib hgfonthl.lib+testi.obj (한글일때) |
           |  tlib hgfonthl.lib+test.obj             |
           +-----------------------------------------+

이제 등록은 끝난 셈이고 hghlib.h 를 수정하는 일만 남았다. hghlib.h  를 
잘 살펴보면 다음과 같은 부분이 보인다.
                                                         
      +-- hghlib.h 의 일부 -----------------------------+
      |                                                 |
      | // 9 english font define ...                    |
      |                                                 |
      | #define BIG_ENG         &big_eng    ,ENG_256    |
      | .                                               |
      | .                                               |
      |                                                 |
      | // 15 hangul font define ...                    |
      |                                                 |
      | #define GODIK1_HAN      &godik1_han ,HAN_8x4x4  |
      | .                                               |
      | .                                               |
      +-------------------------------------------------+

이 부분에서 '// 9 english font define..' 라고 되어 있는 부분이 영문 폰
트를 등록하는 부분이며 '// 15 hangul font define..' 라고 되어 있는  부
분이 한글 폰트를 등록하는 부분이다. 만일 등록한 영문 폰트 화일의  이름
이 ABC 였으면 

              #define ABC_ENG         &abc_eng,ENG_256

을 영문 폰트 정의부에 추가하고 한글 폰트 화일의 이름이 ABC 였으면

              #define ABC_HAN         &abc_han,한글형식

을 한글 폰트 정의부에 추가한다. '한글형식' 이라고 쓴 부분은 바로  한글
의 구성 형식을 말하는 것으로 mkfont.exe 에서 리턴키이로 폰트를 볼때 부
윈도우 Title 부분에 나타난다.  이 형식은 다음의 것중 선택하면 된다. 영
문은 무조건 ENG_256 이고 한글은 4 가지중 선택한다.

             +- 한글 폰트의 형식 4 가지 --+
             |                            |
             |  // font format            |
             |                            |
             |  #define HAN_8x4x4       0 |
             |  #define HAN_6x2x1       1 |
             |  #define HAN_10x4x4      2 |
             |  #define HAN_2x1x2       3 |
             |  #define ENG_256         0 |
             +----------------------------+

마지막으로 남은 작업은 extern.h 의 업데이트이다.  헤더화일의  끝부분을 
살펴보면 아래와 같은 부분이 있다.

             +- extern.h 의 일부분 ------------+
             |                                 |
             |  extern "C" {                   |
             |                                 |
             |      extern void  big_eng();    |
             |      .                          |
             |      .                          |
             |                                 |
             |      extern void  godik1_han(); |
             |      .                          |
             |      .                          |
             |  };                             |
             +---------------------------------+

여기에 등록 폰트를 추가해야 한다. 만일 영문 폰트 화일 이름이 ABC  였다
면 abc_eng 가 생겼을 것이므로 

              extern void abc_eng();

를 추가하면 되고 한글 폰트 화일 이름이 ABC 였다면 abc_han 이 생겼을 것
이므로
              extern void abc_han();

을  추가한다.  이제  모든  등록작업이  끝났으니  hgSetHanFont   함수나 
hgSetEngFont 함수로 불러서 쓰기만 하면 된다.

<GETCHIP.exe>

          현재   가지고   있는   비디오   카드의   종류를    알려준다. 
Hercules,EGA,VGA 를 식별하며 SuperVGA 일 경우 한글 라이브러리  2.0  이 
지원하는 7 가지의 SuperVGA ChipSet 인지를 조사하여 그 종류와 결과를 화
면에 표시해 준다.

<HELPC.exe>

        한글 라이브러리 2.0 의 Help 기능을 위해 만들어 진것으로 특정한 
형식으로 만들어진 도움말 화일을 분석하여 인덱스 화일을 만들어 준다. 도
움말 화일의 형식은 다음과 같다.

                +- 도움말 화일 (file.hhf) 의 형식 -+                       
                |  ( 반드시 .hhf 여야함 )          |                       
                |                                  |                       
                |  $keyword                        |                       
                |  문장                            |                       
                |  문장                            |                       
                |  .                               |                       
                |  .                               |                       
                |  $keyword2                       |                       
                |  문장                            |                       
                |  .                               |                       
                |  .                               |                       
                |  $$      <- 끝표시               |                       
                +----------------------------------+                       

예를 들어 test.hhf 를 다음과 같이 작성했다고 하자.

             +- 도움말 화일의 작성 예 --------------+
             |                                      |
             |  $한글라이브러리                     |
             |  한글에 관한 입/출력 루틴들을        |
             |  모아 쓰기 좋도록 라이브러리화 한것. |
             |  $$                                  |
             +--------------------------------------+

이를 한글 라이브러리 2.0 의 함수에서 사용하기 위해서는  인덱스  화일이 
필요한데 다음과 같이 하면 된다.

             +- 인덱스 화일을 만드는 예 ------------------+
             |                                            |
             |  helpc test <enter> ( 확장자 붙이지 않음 ) |
             +--------------------------------------------+

그러면 test.hix 가 생기고,도움말 함수에서 이용할 수 있게 된다. 이용 방
법은 hgHHELP_.. 류의 함수 사용법을 참고하기 바란다.

<HMCMAKER.exe>

        이 유틸리티는 한글 라이브러리 2.0 안에 포함된 마우스  라이브러
리를 위한 것이다. 이 마우스 라이브러리에서는 16x16 의 마우스 커서를 이
용하는데 이때 이 유틸리티를 사용하면 마우스 커서를  실행화일에  내장할 
수 있다. 그 순서는 다음과 같다.

      +-------- 마우스 커서를 만드는 예 -----------------------+
      |                                                        |
      | 1.일반적인 폰트 에디터로 마우스 커서를 디자인 한다. 단 |
      |   이때 마우스 커서를 위한 부분과 테두리를 그리기  위한 |
      |   부분을 연달아서 만든다. 즉 16x16 의 두 글자를 디자인 |
      |   하는 것이다. 디스켓에는 hlv20mcr.exe 안에 예제  마우 |
      |   스 커서를 담고 있는 폰트 화일들 (.hmc)  이  들어있으 |
      |   므로 이것을 폰트 에디터로 읽어보면 쉽게 이해할 수 있 |
      |   을 것이다.                                           |
      | 2.각각의 글자를 오른쪽으로 8 번 쉬프트해 놓는다.       |
      | 3.저장한다.                                            |
      +--------------------------------------------------------+

이렇게 디자인한 화일을 mctest.hmc 라고 하자. 디자인한 글자의  모양에서 
(8,8) 이 마우스 커서의 꼭지점이라고 할때 다음과 같이 입력한다.

        hmcmaker mctest 8 8 <enter>

그러면 mctest.hmf 가  만들어  지는데  이것을  다음과  같이  컴파일해서 
hginitl.lib 에 넣는다.

     +- 라이브러리에 합치는 예 -------+
     |                                |
     |  bcc -c -ml mctest.hmf <enter> |
     |  tlib hginitl+mctest <enter>   |
     +--------------------------------+

이제 hginit.h 에서 다음과 같은 부분을 찾는다.

     +----------- hginit.h 의 일부분 -------------------+
     |                                                  |
     |  /* hgSetMouseCursor */                          |
     |                                                  |
     |  #define DEFAULT                 &default_arrow  |
     |  #define CROSS                   &cross          |
     |  #define QUESTION                &question       |
     |  #define NOT                     &not            |
     |  #define TIMER                   &timer          |
     |  #define BUBBLE                  &bubble         |
     |  #define ARROW2                  &arrow2         |
     +--------------------------------------------------+

그리고 끝에 다음을 추가한다.

#define MCTEST                  &mctest

또 extern.h 의 끝부분을 보면 다음과 같은 부분이 있다.

              +-------- extern.h 의 일부분 ---------+
              |                                     |
              | /* mouse cursor external define */  |
              |                                     |
              | extern void cross();                |
              | extern void default_arrow();        |
              | extern void question();             |
              | extern void not();                  |
              | extern void timer();                |
              | extern void bubble();               |
              | extern void arrow2();               |
              +-------------------------------------+

역시 끝에 다음을 추가한다.

extern void mctest();

그러면 이제 hgSetMouseCursor(MCTEST); 함수로 호출하면 프로그램  내에서 
마우스 커서의 모양을 바꿀 수 있게 된다.

<HPCX.exe>

        한글 라이브러리 2.0 의 PCX 화일 기능을 시험하는  프로그램이다. 
Hercules,VGA 16 color,VGA 256 color 용의 PCX File 을 읽어 화면에  보여
주며 Standard VGA 의 경우 VGA 16 color 를 640x480,16 color  에서,Super 
VGA 의 경우 VGA 16 color 는 800x600,16 color 에서,VGA 256 color 의  경
우 800x600,256 color 에서 그림을 보여준다.

<ICONDRAW.exe>

        한글 라이브러리 2.0 의 아이콘 기능을 위한 것이다.   기본적으로 
VGA 16 color 모드에서 16 색을 가지고 아이콘을 디자인 할 수 있도록 만들
어 졌다. 간단한 아이콘 디자인 기능도 가지고 있지만 한글 라이브러리 2.0 
에서 사용되는 내장 아이콘을 만들 수 있는 기능을 중심으로  디자인  되었
다. 풀다운 메뉴의 아이템중 화일저장을 선택하면 현재 편집하고 있던 아이
콘을 (ictest.hic 라고 가정) ictest.hif 라는 형태로 바꾸어 준다. 그러면 
이 화일을 다음과 같이 컴파일해서 라이브러리에 넣는다.

             +- 아이콘을 라이브러리에 합치는 예 -+
             |                                   |
             |  bcc -c -ml ictest.hif <enter>    |
             |  tlib hgiconl.lib+ictest <enter>  |
             +-----------------------------------+

이때 hgicon.h 의 내용을 보면 다음과 같다.

              +-------- hgicon.h 의 일부 --------------+
              |                                        |
              | #define WINCLOSE_ICON  &winclose_icon  |
              | #define WINEND_ICON    &winend_icon    |
              | #define WINCLOSER_ICON &winclr_icon    |
              | #define WINENDR_ICON   &winenr_icon    |
              | .                                      |
              | .                                      |
              | extern void winclose_icon(HICON *p);   |
              | extern void winend_icon(HICON *p);     |
              | extern void winclr_icon(HICON *p);     |
              | extern void winenr_icon(HICON *p);     |
              +----------------------------------------+

여기에 다음의 두줄을 추가한다.

#define ICTEST_ICON     &ictest_icon
.
.
extern void ictest_icon(HICON *p);

그러면 이제 p=hgHICON_Set(ICTEST_ICON); 처럼 해서 내장 아이콘을 프로그
램내에서 사용할 수 있게 된다. hgHICON_.. 함수들에 대해서는  manual  #3 
를 참고하기 바란다. 단 허큘레스 모드에서 icondraw.exe 를 실행했을 경우 
대부분의 기능은 이상이 없지만 2 색으로 밖에 디자인이  안된다.  (흑/백) 
마지막으로 이 icondraw.exe 는 MS-Windows 의 32x32 아이콘을 읽어들일 수 
있는 기능이 있다. Windows 의 강력한 아이콘 에디터로 아이콘을 디자인 한 
후 이 icondraw.exe 로 읽어들여서 "새로 저장",혹은 "화일저장" 하여 외부
/내장 아이콘으로 사용할 수 있다.

<HR.exe>

        한글,그래픽 문자가 섞여 있는 상용조합형 문서를 화면에 보여주는 
프로그램이다. 한글 라이브러리 2.0 과 가상 메모리 시스템의 사용으로  한
번에 읽을 수 있는 텍스트의 양은 수메가에 이르며 [F1] 은 도움말,[F2] 는 
화일상태를 보여준다.
